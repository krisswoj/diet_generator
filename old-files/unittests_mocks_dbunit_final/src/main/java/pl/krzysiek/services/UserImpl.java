package pl.krzysiek.services;

import org.springframework.stereotype.Component;
import pl.krzysiek.domain.User;
import pl.krzysiek.repository.UserRepository;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;

@Component
public class UserImpl implements UserRepository {

    private Connection connection;
    private PreparedStatement addUsersStatement;
    private PreparedStatement getAllStatement;
    private PreparedStatement getByIdStatement;
    private PreparedStatement deleteTableStatement;
    private PreparedStatement updateStatement;
    private PreparedStatement deleteByIdStatement;

    public UserImpl(Connection connection) throws SQLException {

        this.connection = connection;
        if (!isReady()) {
            createTables();
        }
        setConnection(connection);
    }

//    public UserImpl() throws SQLException {
//        this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
//        if (!isReady()) {
//            createTables();
//        }
//        this.setConnection(this.connection);
//    }

    public UserImpl() {
    }

    public void createTables() throws SQLException {
        connection.createStatement().executeUpdate(
                "CREATE TABLE Users "
                        + "(id int GENERATED BY DEFAULT AS IDENTITY , "
                        + " name varchar(30), "
                        + " age INTEGER," +
                "PRIMARY KEY (id))");
    }

    public boolean isReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Users".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public List<User> getAll() {
        List<User> users = new LinkedList<>();
        try {
            ResultSet rs = getAllStatement.executeQuery();

            while (rs.next()) {
                User z = new User();
                z.setId(rs.getInt("id"));
                z.setName(rs.getString("name"));
                z.setAge(rs.getInt("age"));
                users.add(z);
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return users;
    }

    @Override
    public User getById(int id) {
        User user = new User();

        try {
            getByIdStatement.setInt(1, id);
            ResultSet rs = getByIdStatement.executeQuery();

            while (rs.next()) {
                user.setId(rs.getInt("id"));
                user.setName(rs.getString("name"));
                user.setAge(rs.getInt("age"));
                return user;
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return user;
    }

    @Override
    public int addUser(User user) {
        int count = 0;
        try {
            addUsersStatement.setString(1, user.getName());
            addUsersStatement.setInt(2, user.getAge());
            count = addUsersStatement.executeUpdate();
            ResultSet generatedKeys = addUsersStatement.getGeneratedKeys();

            if(generatedKeys.next()){
                user.setId(generatedKeys.getInt(1));
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }


    @Override
    public int deleteUser(User user) throws SQLException {

        try{
            deleteByIdStatement.setInt(1, user.getId());
            return deleteByIdStatement.executeUpdate();
        } catch (SQLException e){
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }

//        deleteByIdStatement.setInt(1, user.getId());
//        return deleteByIdStatement.executeUpdate();

    }

    @Override
    public void updateUser(int Idbefore, User user) throws SQLException {

        updateStatement.setInt(1, user.getAge());
        updateStatement.setInt(2, Idbefore);
        updateStatement.executeUpdate();

    }

    @Override
    public void dropTable() throws SQLException {
        deleteTableStatement.executeUpdate();
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    /**
     * @param connection the connection to set
     */

    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addUsersStatement = connection.prepareStatement("INSERT INTO Users (NAME, AGE) VALUES (?,?)", Statement.RETURN_GENERATED_KEYS);
        getAllStatement = connection.prepareStatement("SELECT * FROM Users");
        getByIdStatement = connection.prepareStatement("SELECT * FROM Users WHERE ID = ?");
        deleteTableStatement = connection.prepareStatement("DROP TABLE Users");
        updateStatement = connection.prepareStatement("UPDATE Users SET AGE = ? WHERE ID = ?");
        deleteByIdStatement = connection.prepareStatement("DELETE FROM Users WHERE ID = ?");
    }
}
