package pl.krzysiek.services;

import pl.krzysiek.domain.ZawodyZapisy;
import pl.krzysiek.repository.ZawodyZapisyRepository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

public class ZawodyZapisyImpl implements ZawodyZapisyRepository {

    private Connection connection;
    private PreparedStatement addZawodyZapisyStatement;
    private PreparedStatement addZawodyZapisyStatementNew;
    private PreparedStatement getAllStatement;
    private PreparedStatement getByIdStatement;
    private PreparedStatement deleteTableStatement;
    private PreparedStatement updateStatement;
    private PreparedStatement deleteByIdStatement;

    public ZawodyZapisyImpl(Connection connection) throws SQLException {

        this.connection = connection;
        if (!sprawdzCzyGotowa()) {
            createTables();
        }
        setConnection(connection);
    }


    public void createTables() throws SQLException {
        connection.createStatement().executeUpdate("CREATE TABLE ZawodyZapisy " + "(id int GENERATED BY DEFAULT AS IDENTITY, " + " name varchar(30) NOT NULL, " + " age INTEGER)");
    }

    public boolean sprawdzCzyGotowa() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("ZawodyZapisy".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public List<ZawodyZapisy> getAll() {
        List<ZawodyZapisy> zawodyZapisies = new LinkedList<>();
        try {
            ResultSet rs = getAllStatement.executeQuery();

            while (rs.next()) {
                ZawodyZapisy z = new ZawodyZapisy();
                z.setId(rs.getInt("id"));
                z.setImie(rs.getString("name"));
                z.setWiek(rs.getInt("age"));
                zawodyZapisies.add(z);
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return zawodyZapisies;
    }

    @Override
    public ZawodyZapisy getById(int id) throws SQLException {

        getByIdStatement.setInt(1, id);
        ResultSet rs = getByIdStatement.executeQuery();
        if (rs.next()) {
            ZawodyZapisy zawodyZapisy = new ZawodyZapisy();
            zawodyZapisy.setId(rs.getInt("id"));
            zawodyZapisy.setImie(rs.getString("name"));
            zawodyZapisy.setWiek(rs.getInt("age"));
            return zawodyZapisy;
        } else {
            return null;
        }
    }

    @Override
    public void addZawodyZapisy(ZawodyZapisy zawodyZapisy) {
        try {
            addZawodyZapisyStatement.setString(1, zawodyZapisy.getImie());
            addZawodyZapisyStatement.setInt(2, zawodyZapisy.getWiek());
            addZawodyZapisyStatement.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }


    @Override
    public void deleteZawodyZapisy(int IdZawodnika) throws SQLException {

        deleteByIdStatement.setInt(1, IdZawodnika);
        deleteByIdStatement.executeUpdate();

    }

    @Override
    public void updateZawodyZapisy(int Idbefore, ZawodyZapisy newZawodyZapisy) throws SQLException {

        updateStatement.setInt(2, Idbefore);
        updateStatement.setInt(1, newZawodyZapisy.getWiek());
        updateStatement.executeUpdate();

    }

    @Override
    public void dropTable() throws SQLException {
        deleteTableStatement.executeUpdate();
    }


    public Connection getConnection() {
        return connection;
    }

    /**
     * @param connection the connection to set
     */
    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addZawodyZapisyStatement = connection.prepareStatement("INSERT INTO ZawodyZapisy (NAME, AGE) VALUES (?,?)");
        getAllStatement = connection.prepareStatement("SELECT * FROM ZawodyZapisy");
        getByIdStatement = connection.prepareStatement("SELECT * FROM ZawodyZapisy WHERE id = ?");
        deleteTableStatement = connection.prepareStatement("DROP TABLE ZawodyZapisy");
        updateStatement = connection.prepareStatement("UPDATE ZawodyZapisy SET age = ? WHERE id = ?");
        deleteByIdStatement = connection.prepareStatement("DELETE FROM ZawodyZapisy WHERE id = ?");
    }
}
